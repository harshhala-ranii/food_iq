name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: food_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          cd backend && poetry install
          
      - name: Check backend formatting with Black
        run: |
          cd backend && poetry run black --check .
          
      - name: Lint backend with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          npm install --no-save stylelint stylelint-config-standard prettier
          
      - name: Check CSS syntax with stylelint
        run: |
          cd frontend
          npx stylelint "src/**/*.css" || echo "CSS syntax check failed but continuing..."
          
      - name: Check frontend formatting with Prettier
        run: |
          cd frontend
          npm run format:check
          
      - name: Lint frontend
        run: |
          cd frontend
          npm run lint
          
      - name: Test with pytest
        env:
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/food_db_test
        run: |
          mkdir -p backend/tests
          cd backend
          poetry run pytest --cov=. --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          fail_ci_if_error: false

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/food-iq-backend:latest
          
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/food-iq-frontend:latest 