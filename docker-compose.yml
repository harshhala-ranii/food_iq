version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: food_db
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-food_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - food_network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: food_backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DATABASE_URL=postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-food_db}
      - ENVIRONMENT=docker
      - MODEL_PATH=/app/models/Indian_Food_CNN_Model.h5
      - PYTHONUNBUFFERED=1
      - TF_ENABLE_ONEDNN_OPTS=0
      - TF_CPP_MIN_LOG_LEVEL=2
      - PYTHONPATH=/app
      - PIP_NO_CACHE_DIR=1
      - KERAS_BACKEND=tensorflow
    ports:
      - "${PORT:-8000}:8000"
    volumes:
      - ./backend:/app
      - model_data:/app/models
    networks:
      - food_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: food_frontend
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=${API_URL:-http://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - food_network

networks:
  food_network:
    driver: bridge

volumes:
  postgres_data:
  model_data: